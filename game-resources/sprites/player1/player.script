local rendercam = require "rendercam.rendercam"

local input_left = hash("left")
local input_right = hash("right")
local input_up = hash("up")
local input_down = hash("down")

local input_primary_hit = hash("primary_hit")

local trigger_response = hash("trigger_response")
local portal_group = hash("portal")
local damage = hash("damage")
local heal_message = hash("heal")

local player_stat_init = hash("player_stat_init")
local collect_item = hash("collect_item")
local player_item_init = hash("player_item_init")

local FOG_SPEED_FACTOR = 0.1


local function check_level_conditions(self)
	if self.condition == nil then
		do return end
	elseif self.condition.kills ~=nil and (self.condition.kills <= self.kill_count) then
		msg.post("/gui/messenger", "display_message", { message = "Kill count met!" })
	elseif self.condition.coins ~=nil and (self.condition.coins <= self.coin_count) then
		msg.post("/gui/messenger", "display_message", { message = "Coin count met!" })
	end
	print("kill count: " .. self.kill_count .. " coin count: " .. self.coin_count)

	if (self.condition.kills == nil or self.condition.kills <= self.kill_count) and (self.condition.coins == nil or self.condition.coins <= self.coin_count) then
		msg.post(msg.url("/world_edit"), "enable_portal")
	end
end


local function register_condition(self, condition)
	self.condition = condition
	local condition_message = "You need to... \n"
	if condition == nil then 
		do return end
	end
	if condition.kills then
		condition_message = condition_message .. "kill " .. condition.kills .. " enemies. "
	end
	if condition.kills and condition.coins then
		condition_message = condition_message .. "and collect " .. condition.coins .. " coins. "
	elseif condition.coins then
		condition_message = condition_message .. "collect " .. condition.coins .. " coins. "
	end

	msg.post("/gui/messenger", "display_condition", { message = condition_message })
end

local function fire_rocket(self)
	-- fire in the direction of the mouse
	local dir = vmath.normalize(self.mouse - go.get_position())
	local angle = math.atan2(dir.y, dir.x)
	local rot = vmath.quat_rotation_z(angle)
	dir.z = 0
	local props = { dir = dir }
	factory.create("#rocketfactory", nil, rot, props)
	self.rocket_disabled = true
	timer.delay(self.rocket_reload_time, false, function() self.rocket_disabled = false end)
	msg.post(msg.url("/gui/ammo"), "rocket_reload", { reload_time = self.rocket_reload_time })
end

local function set_current_health(self, health)
	self.current_health = health
	msg.post("/gui/health_ui", "set_current_health", { current_health = self.current_health, max_health = self.max_health })
end

local function heal(self, amount)
	if not (self.current_health == self.max_health) then
		if self.current_health + amount > self.max_health then
		amount = self.max_health - self.current_health
		end
		set_current_health(self, self.current_health + amount)
	end
end

local function update_sword_stats(self, knockback, melee_attackspeed)
	msg.post(self.player_collection[2], "update_sword_stats", { knockback = knockback, attack_speed = melee_attackspeed })
end


local function update_player_stats(self, max_health, speed, rocket_reload_time, knockback, melee_attackspeed)
	if max_health ~= self.max_health then
		self.max_health = max_health
	end
	if speed ~= self.speed then
		self.speed = speed
	end
	if rocket_reload_time ~= self.rocket_reload_time then
		self.rocket_reload_time = rocket_reload_time
	end
	if knockback ~= self.knockback or melee_attackspeed ~= self.melee_attackspeed then
		self.knockback = knockback
		self.melee_attackspeed = melee_attackspeed
		update_sword_stats(self, knockback, melee_attackspeed)
	end
end

local function update_stats(self)
    local new_melee_attackspeed = self.base_melee_attackspeed/(1 + 0.1 * self.items["melee_attack_speed"].amount)
    local new_rocket_reload_time = self.base_rocket_reload_time/(1 + 0.1 * self.items["ranged_attack_speed"].amount)
    local new_speed =  self.base_speed + 10 * self.items["movement_speed"].amount
	local new_max_health = self.base_max_health
	update_player_stats(self, new_max_health, new_speed, new_rocket_reload_time, self.base_knockback, new_melee_attackspeed)
end

local function set_player_base_stats(self, max_health, speed, rocket_reload_time, knockback, melee_attackspeed)
	self.base_max_health = max_health
	self.base_speed = speed
	self.base_rocket_reload_time = rocket_reload_time
	self.base_knockback = knockback
	self.base_melee_attackspeed = melee_attackspeed

	update_stats(self)

	update_sword_stats(self, knockback, melee_attackspeed)
	set_current_health(self, self.max_health)
end

local function add_item(self, item_type, amount)
	self.items[item_type].amount = self.items[item_type].amount + amount
	update_stats(self)
end


local function set_sprite_direction(self, new_dir)
    if new_dir.x < 0 then
        -- hflip the sprite
        sprite.set_hflip(self.player_collection[1].."#sprite", true)
    elseif new_dir.x > 0 then
        -- hflip the sprite
        sprite.set_hflip(self.player_collection[1].."#sprite", false)
    end
end

function init(self)
	sprite.play_flipbook(msg.url("#sprite"), "player_idle")
	msg.post(".", "acquire_input_focus")

	-- notify level_control that player is loaded
	msg.post(msg.url("main","/level_control","level_control"), "player_loaded")

	-- to finish the level
	self.condition = nil
	self.kill_count = 0
	self.coin_count = 0
	
	-- positional variables
	self.firing = false
	self.dir = vmath.vector3(0, 0, 0)
	self.input = vmath.vector3()
	self.mouse = vmath.vector3(0, 0, 0)

	-- player base stats
	self.base_max_health = 100
	self.base_speed = 100
	self.base_rocket_reload_time = 2
	self.base_knockback = 100
	self.base_melee_attackspeed = 1

	self.pressed_keys = {
		[input_left] = false,
		[input_right] = false,
		[input_up] = false,
		[input_down] = false
	}


	self.items = {
		["melee_attack_speed"] = {amount = 0},
		["ranged_attack_speed"] = {amount = 0},
		["movement_speed"] = {amount = 0}
	}


	self.rocket_disabled = false
	self.player_collection = {go.get_id("/player1/player1"),go.get_id("/player1/sword")}
	self.is_in_fog = false;
	update_stats(self)
	set_current_health(self, self.max_health)

	-- A timer with a delay of zero will trigger just before the text frame's update.
	local myID = self.player_collection[1]
	timer.delay(0, false, function() rendercam.follow(myID) rendercam.set_ortho_scale(0.3) end)
	-- self.follow = true
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	--sprite.play_flipbook(msg.url("#sprite"), "player_walk")
	if self.moving then
		local pos = go.get_position()
		local speed = self.speed
		if (self.is_in_fog) then
			speed = speed * FOG_SPEED_FACTOR
		end 
		pos = pos + self.dir * speed * dt
		

		for i, id in ipairs(self.player_collection) do
			--local pos = go.get_position(id)
			pos = pos + self.dir * self.speed * dt
			--set an offset for the sword into moving direction
			if(i == 2) then
				pos = pos + 15 * self.dir
				--set the rotation of the sword
				local angle = math.atan2(self.dir.y, self.dir.x)
				local rot = vmath.quat_rotation_z(angle)
				go.set_rotation(rot, id)
			end
			go.set_position(pos, id)
		end
	end

	if self.firing and not self.rocket_disabled then
		fire_rocket(self)
	end

	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == trigger_response and message.group == portal_group and message.enter then
		-- disable portal to have time to spawn next level
		local portal_trigger_url = msg.url(nil, message.other_id, "portal_trigger")
		msg.post(portal_trigger_url, "disable")

		-- level is completed - we need all the 
		local level_control_url = msg.url("main","/level_control", "level_control")
		msg.post(level_control_url, "level_completed", {items = self.items })
	elseif message_id == damage then
		set_current_health(self, self.current_health - message.damage)
		if self.current_health <= 0 then
			msg.post("/gui/messenger", "display_message", { message = "You died!" })
			local level_control_url = msg.url("main","/level_control", "level_control")
			msg.post(level_control_url, "player_died")
		end
	elseif message_id == heal_message then
		heal(self, message.amount)
	elseif message_id == player_stat_init then
		--set_player_base_stats(self, message.max_health, message.speed, message.rocket_reload_time, message.knockback, message.melee_attackspeed)
	elseif message_id == player_item_init then
		print("player_item_init")
		if message.condition then 
			print("register condition")
			register_condition(self, message.condition)
		end
		self.items = message.items
		update_stats(self)
	elseif message_id == hash("kill_feedback") then
		self.kill_count = self.kill_count + 1
		check_level_conditions(self)
	elseif message_id == hash("coin_collected") then
		self.coin_count = self.coin_count + 1
		msg.post("/gui/messenger", "display_message", { message = "Coin collected!\nYou have " .. self.coin_count .. " coins."})
		check_level_conditions(self)
	elseif message_id == collect_item then
		if message.item_type == "melee_attack_speed" then
			add_item(self, "melee_attack_speed", message.amount)
		elseif message.item_type == "ranged_attack_speed" then
			add_item(self, "ranged_attack_speed", message.amount)
		elseif message.item_type == "movement_speed" then
			add_item(self, "movement_speed", message.amount)
		else 
			print("unknown item type")
		end
	elseif message_id == trigger_response and message.other_group == hash("fog") then
		if (message.enter) then
			self.is_in_fog = true
		else
			self.is_in_fog = false 
		end
	end
end

function on_input(self, action_id, action)
	if action.x and action.y then
		-- convert mouse position from screen coordinates to world coordinates
		self.mouse = rendercam.screen_to_world_2d(action.x, action.y)
	end

	local function is_arrow_key(action_id)
		return action_id == input_left or action_id == input_right or action_id == input_up or action_id == input_down
	end

	if is_arrow_key(action_id) then
		if action.pressed then
			self.pressed_keys[action_id] = true
			sprite.play_flipbook(msg.url("#sprite"), "player_walk")
		end
		if action.released then
			self.pressed_keys[action_id] = false
			if not (self.pressed_keys[input_left] or self.pressed_keys[input_right] or self.pressed_keys[input_up] or self.pressed_keys[input_down]) then
				sprite.play_flipbook(msg.url("#sprite"), "player_idle")
			end
		end
	end


	if action_id == input_left then
		self.input.x = -1
	elseif action_id == input_right then
		self.input.x = 1
	elseif action_id == input_up then
		self.input.y = 1
	elseif action_id == input_down then
		self.input.y = -1
	elseif action_id == input_primary_hit and action.pressed then
		self.firing = true
	end
	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
		set_sprite_direction(self, self.dir)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
