local rendercam = require "rendercam.rendercam"

local input_left = hash("left")
local input_right = hash("right")
local input_up = hash("up")
local input_down = hash("down")

local input_primary_hit = hash("primary_hit")


local function fire_rocket(self)
    -- fire in the direction of the mouse
    local dir = vmath.normalize(self.mouse - go.get_position())
    local angle = math.atan2(dir.y, dir.x)
	local rot = vmath.quat_rotation_z(angle)
	dir.z = 0
    local props = { dir = dir }
    factory.create("#rocketfactory", nil, rot, props)
	self.rocket_disabled = true
	timer.delay(self.rocket_reload_time, false, function() self.rocket_disabled = false end)
	msg.post("/gui#ammo", "rocket_reload",{reload_time= self.rocket_reload_time})
end



function init(self)
	msg.post(".", "acquire_input_focus")

	self.firing = false
	self.dir = vmath.vector3(0, 0, 0)
	self.input = vmath.vector3()
	self.speed = 100

	self.mouse = vmath.vector3(0, 0, 0)

	self.rocket_disabled = false
	self.rocket_reload_time = 2

	local myID = go.get_id()
	-- A timer with a delay of zero will trigger just before the text frame's update.
	timer.delay(0, false, function() rendercam.follow(myID) end)
	-- self.follow = true


end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if self.moving then
		local pos = go.get_position()
		pos = pos + self.dir * self.speed * dt
		go.set_position(pos)
	end
	
	if self.firing and not self.rocket_disabled then
		fire_rocket(self)
	end

	self.input.x = 0
	self.input.y = 0

	self.moving = false
	self.firing = false
end 

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action.x and action.y then
		-- convert mouse position from screen coordinates to world coordinates
		self.mouse = rendercam.screen_to_world_2d(action.x, action.y)
	end

	
	if action_id == input_left then
		self.input.x = -1
	elseif action_id == input_right then
		self.input.x = 1
	elseif action_id == input_up then
		self.input.y = 1
	elseif action_id == input_down then
		self.input.y = -1
		
	elseif action_id == input_primary_hit and action.pressed then
		self.firing = true
	end
	if vmath.length(self.input) > 0 then
		self.moving = true
		self.dir = vmath.normalize(self.input)
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
