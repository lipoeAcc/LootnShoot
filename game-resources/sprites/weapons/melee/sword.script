local trigger_response = hash("trigger_response")
local collision_response = hash("collision_response")

local update_sword_stats = hash("update_sword_stats")

local function play_idle(self, message_id, message, sender)
	local url = msg.url("#sprite")
	sprite.play_flipbook(url, "sword")
end

local function register_enemy(self, id)
	self.enemies_in_radius[id] = true
end

local function unregister_enemy(self, id)
	self.enemies_in_radius[id] = nil
end


function init(self)
	self.attack_speed = 2
	self.disabled = false
	self.knockback = 100

	self.hitting = false

	self.sword_collision = msg.url("/player1/sword#sword_collision")
	self.sword_trigger = msg.url("/player1/sword#sword_trigger")
	-- list: ids of the other enemies
	self.enemies_in_radius = {}
	

end

function final(self)
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == collision_response and sender == self.sword_trigger then
		if self.disabled == false then
			self.disabled = true
			self.hitting = true
			timer.delay(self.attack_speed, false, function() self.disabled = false end)
			timer.delay(0, false, function() self.hitting = false end)
			-- notify all enemies in radius to be hitted
			for id, _ in pairs(self.enemies_in_radius) do
				if not pcall(function() msg.post(id, "knockback", {knockback = self.knockback, damage = 10, other_id = go.get_id()}) end) then
					-- remove from table if enemy does not exist (because it has been killed)
					self.enemies_in_radius[id] = nil
				end
			end
			local url = msg.url("#sprite")
			sprite.play_flipbook(url, "sword_attack",play_idle)
			msg.post(msg.url("/gui/ammo"), "sword_cooldown", { cooldown = self.attack_speed })
		end
	end
	if message_id == trigger_response and sender == self.sword_collision then
		if message.enter then
			register_enemy(self, message.other_id)
		else
			unregister_enemy(self, message.other_id)
		end
	elseif message_id == update_sword_stats then
		self.attack_speed = message.attack_speed
		self.knockback = message.knockback
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
