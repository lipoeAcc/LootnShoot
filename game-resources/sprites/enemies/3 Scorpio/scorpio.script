local POISON_COOLDOWN = 0.5 -- seconds
local DEFAULT_SPEED = 20

local function calculate_next_position(self, dt)
	self.dt = dt or self.dt
	local direction_normalized = vmath.normalize(self.dir)
	local position = go.get_position() + direction_normalized * self.speed * self.dt
	return position
end

local function set_position(self, dt)
	local position = calculate_next_position(self, dt)
	go.set_position(position)
end

local function shoot_poison()
	local pos = go.get_position()
	local rot = vmath.quat_rotation_z(math.rad(0))
	factory.create("#poison_factory", pos, rot)
end

local function handle_cooldown(self, dt)
	if self.cooldown <= 0 then
		shoot_poison()
		self.cooldown = POISON_COOLDOWN
	else
		self.cooldown = self.cooldown - dt
	end
end

local function handle_wall_collision(self)
	if self.wall_trigger_count == 0 then
		-- turn 90 degrees from current direction
		local direction = vmath.vector3(-self.dir.y, -self.dir.x, 0)
		self.dir = direction
		self.wall_trigger_count = self.wall_trigger_count + 1
	elseif self.wall_trigger_count == 1 then
		self.wall_trigger_count = 0
	end
end

function init(self)
	self.cooldown = 0
	self.speed = DEFAULT_SPEED
	self.dir = vmath.vector3(1, 1, 0)
	self.level_url = nil
	self.dt = 0
	self.wall_trigger_count = 0
	timer.delay(0, false, function() msg.post(msg.url("main","/level_control","level_control"), "get_level_object_url") end)
	
	local pos = go.get_position()
	factory.create("#poison_factory", pos, vmath.quat_rotation_z(math.rad(0)))
end

function final(self)
end

function update(self, dt)
end

function fixed_update(self, dt)
	self.dt = dt
	handle_cooldown(self, dt)
	set_position(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger_response")  then
		if message.other_group == hash("wall") then
			handle_wall_collision(self)
		end
	elseif message_id == hash("set_level_object_url") then
		self.level_url = message.level_url
		print("Level url: " .. self.level_url)
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
