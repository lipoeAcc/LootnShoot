local trigger_response = hash("trigger_response")
local knockback = hash("knockback")
local player = hash("player")
local rockets = hash("rockets")
local collision_response = hash("collision_response")

local function die(self)
	go.delete(self.healthbar_id)
	go.delete(msg.url(nil, go.get_id(), nil))

	msg.post(msg.url("/item_factory"), "drop_item", {position = go.get_position(), individual_dropchance = self.individual_dropchance})
end

local function reduce_health(self,damage)
	self.health = self.health - damage
	if self.health <= 0 then
		die(self)
	else
		go.set_scale(vmath.vector3(self.health / 100, 1, 1), self.healthbar_id)
	end
end

local function set_position(self, direction, dt)
	local direction_normalized = vmath.normalize(direction)
	local position = go.get_position() + direction_normalized * self.speed * dt
	go.set_position(vmath.vector3(position.x, position.y, 1))
	-- set position of healthbar
	go.set_position(position + vmath.vector3(0, 20, 0), self.healthbar_id)
end

local function set_knockback_position(self, direction, dt)
	local direction_normalized = vmath.normalize(direction)
	local position = go.get_position() + direction_normalized * self.knockback_speed * dt
	go.set_position(position)
	-- set position of healthbar
	go.set_position(position + vmath.vector3(0, 20, 0), self.healthbar_id)
end

local function update_position(self, direction, dt)
	--check if knockbacking
	if self.knockbacking then
		set_knockback_position(self, self.knockback_direction, dt)
		return
	end
	set_position(self, direction, dt)
end

local function knockback_complete(self)
	self.knockbacking = false
end

local function apply_knockback(self, direction)
	self.knockbacking = true
	if direction.x == 0 and direction.y == 0 then
		self.knockback_direction = self.dir
	else 
		self.knockback_direction = vmath.normalize(direction)
	end
	timer.delay(self.knockback_time, false, knockback_complete)
end


function init(self)
	self.dir = vmath.vector3(1, 0, 0)
	self.target = vmath.vector3(0, 0, 0)
	self.individual_dropchance = 100
	self.health = 100
	self.speed = 20
	self.healthbar_id = go.get_id("healthbar")
	self.knockbacking = false
	self.knockback_time = 0.3
	self.knockback_speed = 500
	self.disabled = false
	-- time to be able to attack again after hitting
	self.attack_delay = 0.3

	-- do not show healthbar initially
	go.set(self.healthbar_id, "scale", vmath.vector3(0, 0, 0))
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not neededprint('test1')
end

function update(self, dt)
	-- update run
	
end

function fixed_update(self, dt)
	--local id = go.get_id("player1")
	--self.target = go.get_position(id)
	update_position(self, self.dir, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == collision_response then
		if message.group == player then
			if self.disabled == false then
				self.disabled = true
				msg.post(message.other_id, "damage", {damage = 10})
				timer.delay(self.attack_delay, false, function() self.disabled = false end)
			end
		elseif message.group == hash("wall") then 
			self.knockbacking = false
			--self.dir = vmath.vector3(-self.dir.x, -self.dir.y, 0)
		end
	end
	if message_id == knockback and self.knockbacking == false then
		local vector_other = go.get_position(message.other_id) 
		local vector_self = go.get_position()
		apply_knockback(self, vmath.vector3(vector_self.x-vector_other.x, vector_self.y-vector_other.y , 0))
		reduce_health(self, message.damage)
	end
	if message_id == hash("damage") then
		reduce_health(self, message.damage)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
