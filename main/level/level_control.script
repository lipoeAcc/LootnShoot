local level_completed = hash("level_completed")
local done = hash("done")
local player_loaded = hash("player_loaded")

local function apply_messages(self, level)
	if not level.message_url or not level.messages then
		return
	end
	local message_url = level.message_url
	local messages = level.messages
	for i, message in ipairs(messages) do
		timer.delay(message.delay, false, function()
			msg.post(message_url, "display_message", {message = message.message})
		end)	
	end
end

local function load_level(self, level)
	self.level_state = self.level_state + 1
	local loader_url = msg.url("main", "/loader", "loader")

	local params = {level = self.levels[self.level_state], self.time_difficulty}

	msg.post(loader_url, "load_level", params)
end

local function load_death_screen(self)
	local loader_url = msg.url("main", "/loader", "loader")

	local params = {level = self.on_death, self.time_difficulty}
	msg.post(loader_url, "load_level", params)
	self.level_state = 0
	self.player_items = {
		["melee_attack_speed"] = {amount = 0},
		["ranged_attack_speed"] = {amount = 0},
		["movement_speed"] = {amount = 0}
	}
	self.time_difficulty = { time=0, difficulty =1, difficulties = self.time_difficulty.difficulties}
end

function init(self)
	self.level_state = 0
	-- array with an object for each state with level name, url and duration which can be nil (for infinite duration) 
	self.levels = {
		{name="menu", url=msg.url("main","/loader","menu_proxy"), condition = nil, duration= nil, hasplayer=false},
		{name="level_1", url=msg.url("main","/loader","level_1_proxy"), condition = { kills = 4, coins = nil }, duration=nil, hasplayer=true, message_url=msg.url("level_1","/gui/messenger",nil), messages={{message="Welcome to level 1", delay=1}, {message="Good luck", delay=3}}, timer_difficulty_url=msg.url("level_1","/gui/timer_difficulty",nil), world_edit_url=msg.url("level_1","/world_edit",nil)},
		{name="finished_level_1", url=msg.url("main","/loader","finished_level"), condition = nil, duration=nil, hasplayer=false},
		{name="level_2", url=msg.url("main","/loader","level_2_proxy"), condition = { kills = nil, coins = 1 }, duration=nil, hasplayer=true, message_url=msg.url("level_2","/gui/messenger",nil), messages={{message="Welcome to level 2", delay=1}, {message="Good luck", delay=3}},  timer_difficulty_url=msg.url("level_2","/gui/timer_difficulty",nil), world_edit_url=msg.url("level_2","/world_edit",nil)},
	}
	self.on_death = {name="death_screen", url=msg.url("main","/loader","on_death_proxy"), duration=nil}

	-- player stats are in the player.script
	-- self.player = {
	--	max_health = 100,
	--	speed = 100,
	--.	rocket_reload_time = 2,
	--	knockback = 100,
	--	melee_attackspeed = 2,
	--}
	self.player_items = {
		["melee_attack_speed"] = {amount = 0},
		["ranged_attack_speed"] = {amount = 0},
		["movement_speed"] = {amount = 0}
	}

	local difficulties = {
		{name="easy", threshold=45, color=vmath.vector4(0, 1, 0, 1)}, -- green
		{name="medium", threshold=180, color=vmath.vector4(1, 1, 0, 1)}, -- yellow
		{name="hard", threshold=400, color=vmath.vector4(1, 0.5, 0, 1)}, -- orange
		{name="incredible", threshold=800, color=vmath.vector4(1, 0, 0, 1)} -- red
	}
	self.time_difficulty = { time=0, difficulty =1, difficulties = difficulties}



	load_level(self, self.levels[self.level_state+1].level)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == level_completed then
		if self.level_state <= #self.levels and message.items ==nil then
			-- if message is nil, it was just a screen transition
			load_level(self, self.levels[self.level_state+1])
		elseif self.level_state <=#self.levels and message.items ~= nil then
			-- we need to update the time difficulty
			msg.post(self.levels[self.level_state].timer_difficulty_url, "get_time_difficulty", self.time_difficulty)
			--level will be loaded after time difficulty is being received
		end
	elseif message_id == hash("player_died") then
		load_death_screen(self)
	elseif message_id == player_loaded then
		msg.post(sender, "player_item_init", {items= self.player_items, condition = self.levels[self.level_state].condition})
		apply_messages(self, self.levels[self.level_state])
	elseif message_id == hash("get_time_difficulty") then
		msg.post(sender, "set_time_difficulty", self.time_difficulty)
	elseif message_id == hash("set_time_difficulty") then
		self.time_difficulty = message
		load_level(self, self.levels[self.level_state+1])
	elseif message_id == hash("get_level_object_url") then
		msg.post(sender, "set_level_object_url", self.levels[self.level_state].level_url)
	elseif message_id == hash("set_level_object_url") then
		local level_url = message.level_url
		self.levels[self.level_state].level_url = { level_url = level_url }
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
