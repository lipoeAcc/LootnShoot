local level_completed = hash("level_completed")
local done = hash("done")
local player_loaded = hash("player_loaded")

local function load_level(self, level)
	local loader_url = msg.url("main", "/loader", "loader")

	msg.post(loader_url, "load_level", self.levels[self.level_state])
	self.level_state = self.level_state + 1
end

local function load_death_screen(self)
	print("load death screen in level_control")
	local loader_url = msg.url("main", "/loader", "loader")

	msg.post(loader_url, "load_level", self.on_death)
	self.level_state = 1
end

local function set_player_stats(self, player)
	msg.post(msg.url("/player1/player1"), "player_stat_init", {max_health = player.max_health, speed = player.speed, rocket_reload_time = player.rocket_reload_time, knockback = player.knockback, melee_attackspeed = player.melee_attackspeed})
end

function init(self)
	self.level_state = 1
	-- array with an object for each state with level name, url and duration which can be nil (for infinite duration) 
	self.levels = {
		{name="menu", url=msg.url("main","/loader","menu_proxy"), duration=nil, hasplayer=false},
		{name="level_1", url=msg.url("main","/loader","level_1_proxy"), duration=nil, hasplayer=true},
		{name="finished_level_1", url=msg.url("main","/loader","finished_level"), duration=nil, hasplayer=false},
		{name="level_2", url=msg.url("main","/loader","level_2_proxy"), duration=nil, hasplayer=true},
	}
	self.on_death = {name="death_screen", url=msg.url("main","/loader","on_death_proxy"), duration=nil}

	-- player stats
	self.player = {
		max_health = 100,
		speed = 100,
		rocket_reload_time = 2,
		knockback = 100,
		melee_attackspeed = 2,
	}



	load_level(self, self.levels[self.level_state].level)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == level_completed then
		if self.level_state <= #self.levels then
			print("should set player stats here")
			load_level(self, self.levels[self.level_state])
		end
	elseif message_id == hash("player_died") then
		load_death_screen(self)
	elseif message_id == player_loaded then
		set_player_stats(self, self.player)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
