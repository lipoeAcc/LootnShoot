local create_portal = hash("create_portal")
local update_difficulty = hash("update_difficulty")
local get_time_difficulty = hash("get_time_difficulty")
local unregister_spawnpoint_message = hash("unregister_spawnpoint")
local register_portal_spawnpoint = hash("register_portal_spawnpoint")
local enable_portal = hash("enable_portal")
local register_coin_spawnpoint = hash("register_coin_spawnpoint")
local spawn_all_coins = hash("spawn_all_coins")
local spawn_final_stage = hash("spawn_final_stage")

local BASE_DELAY = 2

local function print_length(self)
	for k, v in pairs(self.spawnpoint_dictionary) do
		print("key: " .. tostring(k) .. " value: " .. tostring(v))
	end
end

local function register_spawnpoint(self, message)
	local spawnpoint_id = message.id
	self.spawnpoint_dictionary[spawnpoint_id] = message
end

local function unregister_spawnpoint(self, message)
	local spawnpoint_id = message.id
	self.spawnpoint_dictionary[spawnpoint_id] = nil
end

local function spawn_random_enemy(self)
	if next(self.spawnpoint_dictionary) == nil then
		do return end
	end
    local spawnpoint_keys = {}
    for k in pairs(self.spawnpoint_dictionary) do
        table.insert(spawnpoint_keys, k)
    end
	if #spawnpoint_keys == 0 then
		do return end
	end
    local spawnpoint_index = spawnpoint_keys[math.random(#spawnpoint_keys)]
    msg.post(msg.url("/enemies"), "spawn_random_enemy", {position = self.spawnpoint_dictionary[spawnpoint_index].position})
end

local function message_all_portal_spawnpoints(self, message_id)
	for i = 1, #self.portal_spawnpoint_list do
		msg.post(self.portal_spawnpoint_list[i].id, message_id)
	end
end

local function spawn_portal(self)
	if self.portal_spawned then
		do return end
	end
	self.portal_spawned = true
	if next(self.portal_spawnpoint_list) == nil then
		collectionfactory.create("#portal_factory", vmath.vector3(0,0,0))
	end
	local spawnpoint_index = math.random(#self.portal_spawnpoint_list)
	collectionfactory.create("#portal_factory", self.portal_spawnpoint_list[spawnpoint_index].position)
	message_all_portal_spawnpoints(self, "portal_spawned")
end

local function spawn_coins(self, amount)
	for i = 1, amount do
		if next(self.coin_spawnpoint_list) == nil then
			print("configuration error. Not enough coin spawnpoints")
			do return end
		end
		-- select a random entry from the coin spawnpoint list and spawn a coin there and delete the entry
		local spawnpoint_index = math.random(#self.coin_spawnpoint_list)
		collectionfactory.create("#coin_factory", self.coin_spawnpoint_list[spawnpoint_index].position)
		table.remove(self.coin_spawnpoint_list, spawnpoint_index)
	end
end

local function spawn_enviroment(self)
	return timer.delay((BASE_DELAY/self.difficulty), true, function ()
		spawn_random_enemy(self)
	end)
end

function init(self)
	self.spawnpoint_dictionary = {}
	self.difficulty = 1
	self.portal_spawnpoint_list = {}
	self.coin_spawnpoint_list = {}

	self.portal_spawned = false

	msg.post(msg.url("main","/level_control","level_control"), "get_time_difficulty")

	--timer.delay(5, false, function ()
	--	spawn_portal(self)
	--end)
	--self.spawner_handler = spawn_enviroment(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("register_spawnpoint") then
		register_spawnpoint(self, message)
	elseif message_id == unregister_spawnpoint_message then
		unregister_spawnpoint(self, message)
	elseif message_id == update_difficulty or message_id == set_difficulty then
		self.difficulty = message.difficulty
		if self.spawn_handler then
			timer.cancel(self.spawn_handler)
		end
		self.spawn_handler = spawn_enviroment(self)
	elseif message_id == register_portal_spawnpoint then 
		table.insert(self.portal_spawnpoint_list, {position = message.position, id = message.id})
	elseif message_id == enable_portal then
		spawn_portal(self)
	elseif message_id == register_coin_spawnpoint then 
		table.insert(self.coin_spawnpoint_list, {position = message.position, id = message.id})
	elseif message_id == spawn_all_coins then
		if message.amount ~= nil and message.amount >=0 then
		spawn_coins(self, message.amount)
		end
	elseif message_id == spawn_final_stage then
		print("spawning final stage")
		timer.delay(message.delay, true, function ()
			spawn_random_enemy(self)
		end)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
