local create_portal = hash("create_portal")

local BASE_DELAY = 5

local function print_length(self)
	for k, v in pairs(self.spawnpoint_dictionary) do
		print("key: " .. tostring(k) .. " value: " .. tostring(v))
	end
end

local function register_spawnpoint(self, message)
	local spawnpoint_id = message.id
	self.spawnpoint_dictionary[spawnpoint_id] = message
end

local function unregister_spawnpoint(self, message)
	local spawnpoint_id = message.id
	self.spawnpoint_dictionary[spawnpoint_id] = nil
end

local function spawn_random_enemy(self)
	if next(self.spawnpoint_dictionary) == nil then
		do return end
	end
    local spawnpoint_keys = {}
    for k in pairs(self.spawnpoint_dictionary) do
        table.insert(spawnpoint_keys, k)
    end
    local spawnpoint_index = spawnpoint_keys[math.random(#spawnpoint_keys)]
    msg.post(msg.url("/enemies"), "spawn_random_enemy", {position = self.spawnpoint_dictionary[spawnpoint_index].position})
end

local function spawn_enviroment(self)
	timer.delay((BASE_DELAY/self.difficulty), true, function ()
		spawn_random_enemy(self)
	end)
end

function init(self)
	self.spawnpoint_dictionary = {}
	self.difficulty = 1

	spawn_enviroment(self)
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	-- on message create_portal do
	if message_id == create_portal then
		collectionfactory.create("#portal_factory", message.position)
	elseif message_id == hash("register_spawnpoint") then
		register_spawnpoint(self, message)
	elseif message_id == hash("unregister_spawnpoint") then
		unregister_spawnpoint(self, message)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
