local drop_item = hash("drop_item")

local function select_item(self)
	local random = math.random(1, self.total_dropchance)
	local sum = 0
	for _, item in ipairs(self.items) do
		sum = sum + item.dropchance
		if random <= sum then
			return item
		end
	end
end

function init(self)
	collectionfactory.create('#hp_refill_factory', vmath.vector3(50, 50, 1), nil, nil, 1)
	collectionfactory.create('#melee_attack_speed_factory', vmath.vector3(100, 50, 1), nil, nil, 1)
	collectionfactory.create('#movement_speed_factory', vmath.vector3(150, 50, 1), nil, nil, 1)
	-- aus Performance gründen die höchste dropchance nach oben
	self.items = {
		{name="hp_refill", factory="#hp_refill_factory", dropchance=5},
		{name="melee_attack_speed", factory="#melee_attack_speed_factory", dropchance=2},
		{name="movement_speed", factory="#movement_speed_factory", dropchance=2},
		{name="ranged_attack_speed", factory="#ranged_attack_speed_factory", dropchance=2},
	}

	self.total_dropchance = 0
	for _, item in ipairs(self.items) do
		self.total_dropchance = self.total_dropchance + item.dropchance
	end
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function fixed_update(self, dt)
	-- This function is called if 'Fixed Update Frequency' is enabled in the Engine section of game.project
	-- Can be coupled with fixed updates of the physics simulation if 'Use Fixed Timestep' is enabled in
	-- Physics section of game.project
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == drop_item then
		print("drop_item in itemfactory. Dropchance: " .. message.individual_dropchance .. " Position: " .. message.position.x .. ", " .. message.position.y )
		-- individual dropchance marks of any item to be dropped
		if math.random(1, 100) <= message.individual_dropchance then
			local item = select_item(self)
			collectionfactory.create(item.factory, vmath.vector3(message.position.x, message.position.y, 1))
		end
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
