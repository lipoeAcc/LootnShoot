local function message_update_difficulty(self)
	msg.post(msg.url("/world_edit"), "update_difficulty", {difficulty = self.time_difficulty.difficulty})
end

local function update_difficulty(self)
	gui.set_text(self.difficulty_name_node, self.time_difficulty.difficulties[self.time_difficulty.difficulty].name)
	gui.set_color(self.difficulty_node, self.time_difficulty.difficulties[self.time_difficulty.difficulty].color)
	message_update_difficulty(self)
end

local function set_time(self)
	--self.time_difficulty.time is in seconds. Convert to minutes and seconds
	local min = math.floor(self.time_difficulty.time / 60)
	local sec = self.time_difficulty.time % 60

	gui.set_text(self.timer_node, string.format("%02d:%04.01f", min, sec))
	
	if self.time_difficulty.time > self.time_difficulty.difficulties[self.time_difficulty.difficulty].threshold then
		self.time_difficulty.difficulty = self.time_difficulty.difficulty + 1
		update_difficulty(self)
	end
end

function init(self)
	-- get node time and start the timer
	self.time_difficulty = {}

	-- get the node position
	self.timer_node = gui.get_node("time_difficulty")
	self.difficulty_name_node = gui.get_node("difficulty_name")
	self.difficulty_node = gui.get_node("difficulty")
	gui.set_color(self.timer_node, vmath.vector4(1, 1, 1, 1))

	timer.delay(0.1, true, function()
		self.time_difficulty.time = self.time_difficulty.time + 0.1
		set_time(self)
	end)

	msg.post(msg.url("main","/level_control","level_control"), "get_time_difficulty")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_time_difficulty") then
		self.time_difficulty = message
		update_difficulty(self)
		set_time(self)
	elseif message_id == hash("get_time_difficulty") then
		msg.post(sender, "set_time_difficulty", self.time_difficulty)
	end
end

function on_input(self, action_id, action)
	-- Add input-handling code here. The game object this script is attached to
	-- must have acquired input focus:
	--
	--    msg.post(".", "acquire_input_focus")
	--
	-- All mapped input bindings will be received. Mouse and touch input will
	-- be received regardless of where on the screen it happened.
	-- Learn more: https://defold.com/manuals/input/
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
